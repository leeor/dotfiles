---
# PLUGINS
# ==========================================

# Startup
# -------
- repo: Shougo/dein.vim
- repo: w0ng/vim-hybrid
- repo: itchyny/vim-parenmatch
- repo: thinca/vim-localrc
- repo: christoomey/vim-tmux-navigator
- repo: tpope/vim-fugitive
- repo: vim-airline/vim-airline
  hook_post_source:
    let g:airline_theme='hybrid'
    | let g:airline#extensions#branch#enabled = 1
    | let g:airline#extensions#tabline#enabled = 1
    | let g:airline#extensions#tagbar#enabled = 0
- repo: vim-airline/vim-airline-themes
- repo: ryanoasis/vim-devicons
- repo: easymotion/vim-easymotion
- repo: ctrlpvim/ctrlp.vim
- repo: haya14busa/incsearch.vim
- repo: scrooloose/nerdtree
- repo: Xuyuanp/nerdtree-git-plugin
- repo: tpope/vim-unimpaired
- repo: w0rp/ale.git

# Lazy Loading
# ==========================================

# Languages
# ---------
- { repo: othree/html5.vim, on_ft: html }
- { repo: mustache/vim-mustache-handlebars, on_ft: html }
- { repo: pearofducks/ansible-vim, on_ft: ansible }
- { repo: groenewege/vim-less, on_ft: less }
- { repo: hail2u/vim-css3-syntax, on_ft: css }
- { repo: othree/csscomplete.vim, on_ft: css }

- repo: rhysd/vim-gfm-syntax
  on_ft: markdown
  hook_source:
    let g:gfm_syntax_enable_always = 0
    | let g:gfm_syntax_enable_filetypes = ['markdown']

- { repo: elzr/vim-json, on_ft: json }
- { repo: pangloss/vim-javascript, on_ft: javascript }
- { repo: othree/jspc.vim, on_ft: javascript }
- { repo: heavenshell/vim-jsdoc, on_ft: javascript }
- { repo: moll/vim-node, on_ft: javascript }

- repo: mxw/vim-jsx
  on_ft: javascript
  hook_source: let g:jsx_ext_required = 0

- repo: othree/javascript-libraries-syntax.vim
  on_ft: javascript
  hook_source:
    let g:used_javascript_libs = 'jquery,flux,underscore,backbone,react'

- repo: janko-m/vim-test
  on_ft: javascript

- repo: fatih/vim-go
  on_ft: go
  hook_source:
    let g:go_def_mapping_enabled = 0
    | let g:go_loaded_gosnippets = 1
    | let g:go_snippet_engine = 'neosnippet'
    | let g:go_highlight_extra_types = 1
    | let g:go_highlight_operators = 1

- { repo: tbastos/vim-lua, on_ft: lua }
- { repo: mitsuhiko/vim-python-combined, on_ft: python }
- { repo: raimon49/requirements.txt.vim, on_ft: requirements }
- { repo: osyo-manga/vim-monster, on_ft: ruby }
- { repo: vim-jp/syntax-vim-ex, on_ft: vim }

- { repo: chrisbra/csv.vim, on_ft: csv }
- { repo: tmux-plugins/vim-tmux, on_ft: tmux }
- { repo: cespare/vim-toml, on_ft: toml }
- { repo: PotatoesMaster/i3-vim-syntax, on_ft: i3 }
- { repo: ekalinin/Dockerfile.vim, on_ft: Dockerfile }
- { repo: jstrater/mpvim, on_ft: portfile }
- { repo: tpope/vim-git, on_ft: [ gitcommit, gitrebase, gitconfig ]}
- { repo: robbles/logstash.vim, on_ft: logstash }
- { repo: andreshazard/vim-logreview, on_ft: logreview }
- { repo: exu/pgsql.vim, on_ft: pgsql }
- { repo: othree/nginx-contrib-vim, on_ft: nginx }

# ==========================================
# Commands
# --------
- { repo: Shougo/vinarise.vim, on_cmd: Vinarise }
- { repo: guns/xterm-color-table.vim, on_cmd: XtermColorTable }
- { repo: thinca/vim-prettyprint, on_cmd: PP, on_func: PP }

- repo: metakirby5/codi.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Codi

- repo: mhinz/vim-grepper
  on_cmd: Grepper

- repo: mbbill/undotree
  on_cmd: UndotreeToggle
  hook_add: nnoremap <Leader>gu :UndotreeToggle<CR>

- repo: lambdalisue/vim-gista
  if: empty($VIM_MINIMAL)
  on_cmd: Gista
  hook_add: let g:gista#client#cache_dir = $VARPATH.'/gista/'

- repo: itchyny/dictionary.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Dictionary
  hook_add: nnoremap <silent> <Leader>? :<C-u>Dictionary -no-duplicate<CR>

- repo: beloglazov/vim-online-thesaurus
  if: empty($VIM_MINIMAL)
  on_cmd: [ OnlineThesaurusCurrentWord, Thesaurus ]
  hook_source: let g:online_thesaurus_map_keys = 0
  hook_add: nnoremap <silent> <Leader>K :<C-u>OnlineThesaurusCurrentWord<CR>

# ==========================================
# Interface
# ---------
- { repo: haya14busa/vim-asterisk, on_map: { nv: <Plug> }}

- repo: itchyny/vim-cursorword
  on_path: .*
  hook_source: autocmd MyAutoCmd FileType qf let b:cursorword=0

- repo: airblade/vim-gitgutter
  on_path: .*
  hook_source:
    let g:gitgutter_map_keys = 0
    | let g:gitgutter_sh = $SHELL

- repo: nathanaelkane/vim-indent-guides
  on_cmd: [IndentGuidesEnable, IndentGuidesDisable, IndentGuidesToggle]
  hook_add:
    nmap <silent><Leader>i :<C-u>IndentGuidesToggle<CR>
    | let g:indent_guides_autocmds_enabled = 0
  hook_source:
    let g:indent_guides_enable_on_vim_startup = 0
    | let g:indent_guides_default_mapping = 0
    | let g:indent_guides_indent_levels = 15
    | let g:indent_guides_exclude_filetypes = ['help']

- repo: ciaranm/detectindent
  on_cmd: DetectIndent
  hook_add:
    autocmd MyAutoCmd BufEnter *.js*,*.html,*.css,.tern*
      execute 'DetectIndent'

- repo: rhysd/committia.vim
  on_path: COMMIT_EDITMSG
  hook_source: let g:committia_min_window_width = 70

- repo: Konfekt/FastFold
  on_event: BufEnter
  hook_post_source: FastFoldUpdate

- repo: tpope/vim-dispatch
  on_cmd: [ 'Make', 'Make!', 'Dispatch', 'Focus', 'Focus!', 'Start', 'Start!' ]
  if: ! has('nvim')
  #  hook_add:
  #    let g:dispatch_do_filetypes = [
  #      'ansible', 'python', 'php', 'ruby', 'vim', 'go', 'sh',
  #      'javascript', 'javascript.jsx', 'json', 'css', 'yaml',
  #      'markdown', 'html'
  #    ] |
  #    autocmd MyAutoCmd BufWritePost *
  #    if index(g:dispatch_do_filetypes, &filetype) > -1 && empty(&buftype)
  #    | Make
  #    | endif
  #autocmd User DispatchFinished if (empty(getloclist(0))) | lclose | endif

- repo: junegunn/goyo.vim
  if: empty($VIM_MINIMAL)
  depends: limelight.vim
  on_cmd: Goyo
  hook_add: nnoremap <Leader>G :Goyo<CR>
  hook_source: source $VIMPATH/config/plugins/goyo.vim

- repo: junegunn/limelight.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Limelight

- { repo: t9md/vim-choosewin, on_map: { n: <Plug> }}

# ==========================================
# Completion
# ----------
- repo: ervandew/supertab

- repo: Valloric/YouCompleteMe
  build: git submodule update --init --recursive && ./install.py --tern-completer
  hook_source: # make YCM compatible with UltiSnips (using supertab)
    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    | let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    | let g:SuperTabDefaultCompletionType = '<C-n>'

- repo: SirVer/ultisnips
  on_event: FileType

- repo: Raimondi/delimitMate
  on_event: InsertEnter
  hook_source: let g:delimitMate_expand_cr = 1

- repo: davidhalter/jedi-vim
  on_ft: python
  if: empty($VIM_MINIMAL)
  hook_add:
    let g:jedi#completions_enabled = 0
    | let g:jedi#auto_vim_configuration = 0
    | let g:jedi#smart_auto_mappings = 0
    | let g:jedi#show_call_signatures = 0
  hook_source:
    let g:jedi#use_tag_stack = 0
    | let g:jedi#popup_select_first = 0
    | let g:jedi#popup_on_dot = 0
    | let g:jedi#max_doc_height = 45

- repo: wellle/tmux-complete.vim
  on_event: InsertEnter
  hook_add: let g:tmuxcomplete#trigger = ''

# ==========================================
# Operators
# ---------
- { repo: kana/vim-operator-user, lazy: 1 }

- repo: rhysd/vim-operator-surround
  depends: [ vim-operator-user, vim-textobj-multiblock ]
  on_map: { n: <Plug> }

- repo: haya14busa/vim-operator-flashy
  depends: vim-operator-user
  on_map: { nx: <Plug> }

# ==========================================
# Text objects
# ------------

- { repo: kana/vim-textobj-user, on_func: textobj#user# }
- { repo: bkad/CamelCaseMotion, on_map: { nox: <Plug>CamelCaseMotion }}

- repo: osyo-manga/vim-textobj-multiblock
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_multiblock_no_default_key_mappings = 1

#  vim: set ts=2 sw=2 tw=80 et :
